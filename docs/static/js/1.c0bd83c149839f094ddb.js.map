{"version":3,"sources":["webpack:///static/js/1.c0bd83c149839f094ddb.js","webpack:///src/components/Video/index.vue","webpack:///./src/components/Video/index.vue?0a1b","webpack:///./src/components/Video/index.vue","webpack:///./node_modules/videojs-flash/dist/videojs-flash.es.js","webpack:///./node_modules/videojs-hotkeys/videojs.hotkeys.min.js","webpack:///./node_modules/videojs-swf/package.json"],"names":["webpackJsonp","34nC","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","Video","data","playerOptions","autoplay","sources","type","src","language","poster","computed","player","this","$refs","videoPlayer","methods","playerStateChanged","playerCurrentState","playerIsReady","console","log","hotkeys","volumeStep","seekStep","enableModifiersForNumbers","fullscreenKey","event","which","ctrlKey","render","_vm","_h","$createElement","_c","_self","attrs","span","ref","staticClass","options","customEventName","on","ready","changed","$event","staticRenderFns","esExports","components_Video","normalizeComponent","Component","4CPX","_createGetter","attr","_api","el_","vjs_getProperty","__WEBPACK_IMPORTED_MODULE_0_video_js__","__WEBPACK_IMPORTED_MODULE_0_video_js___default","n","__WEBPACK_IMPORTED_MODULE_1_videojs_swf_package_json__","__WEBPACK_IMPORTED_MODULE_2_global_window__","__WEBPACK_IMPORTED_MODULE_2_global_window___default","classCallCheck","instance","Constructor","TypeError","inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","possibleConstructorReturn","self","call","ReferenceError","Tech","a","getComponent","Dom","dom","Url","url","createTimeRange","mergeOptions","navigator","Flash","_Tech","_this","source","setSource","startTime","load","play","currentTime","videojs","onReady","onEvent","onError","lastSeekTarget_","undefined","createEl","options_","swf","objId","techId","flashVars","readyFunction","eventProxyFunction","errorEventProxyFunction","preload","loop","muted","params","wmode","bgcolor","attributes","id","name","class","embed","tech","ended","setCurrentTime","vjs_play","pause","vjs_pause","_src","currentSrc","setSrc","_this2","getAbsoluteURL","vjs_src","setTimeout","seeking","time","seekable","length","start","end","trigger","vjs_setProperty","currentSource_","duration","readyState","NaN","Infinity","vjs_load","setPoster","buffered","ranges","supportsFullScreen","enterFullScreen","getVideoPlaybackQuality","videoPlaybackQuality","performance","now","creationTime","timing","navigationStart","Date","_readWrite","_readOnly","i","attrUpper","charAt","toUpperCase","slice","val","_i","isSupported","version","withSourceHandlers","nativeSourceHandler","canPlayType","formats","canHandleSource","replace","toLowerCase","ext","getFileExtension","handleSource","dispose","registerSourceHandler","video/flv","video/x-flv","video/mp4","video/m4v","currSwf","el","$","checkReady","triggerReady","swfID","eventName","args","Array","arguments","err","error","version$$1","ActiveXObject","GetVariable","match","e","mimeTypes","enabledPlugin","plugins","description","split","code","getEmbedCode","innerHTML","childNodes","flashVarsString","paramsString","attrsString","getOwnPropertyNames","forEach","key","movie","flashvars","allowScriptAccess","allowNetworking","width","height","streamingFormats","rtmp/mp4","rtmp/flv","streamFromParts","connection","stream","streamToParts","parts","connEnd","search","streamBegin","lastIndexOf","substring","isStreamingType","srcType","RTMP_RE","isStreamingSrc","test","rtmpSourceHandler","can","srcParts","setRtmpConnection","setRtmpStream","getTech","warn","registerTech","VERSION","XMzW","exports","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","t","default","apply","window","videojs_hotkeys","registerPlugin","plugin","r","o","document","u","enableMute","enableVolumeScroll","enableFullscreen","enableNumbers","enableJogStyle","alwaysCaptureHotkeys","enableInactiveFocus","skipInitialFocus","playPauseKey","rewindKey","forwardKey","volumeUpKey","volumeDownKey","muteKey","customKeys","l","util","c","s","m","y","f","v","d","p","b","hasAttribute","setAttribute","style","outline","one","focus","clearTimeout","off","activeElement","parentElement","querySelector","display","bottom","h","controls","relatedTarget","toElement","Math","max","min","wheelDelta","detail","preventDefault","volume","w","stopPropagation","paused","isFullscreen","exitFullscreen","requestFullscreen","metaKey","altKey","k","K","S","T","handler","vA7V","_args","raw","scope","escapedName","rawSpec","spec","_cnpm_publish_time","_from","_hasShrinkwrap","_id","_inCache","_location","_nodeVersion","_npmOperationalInternal","host","tmp","_npmUser","email","_npmVersion","_phantomChildren","_requested","_requiredBy","_resolved","_shasum","_shrinkwrap","_spec","_where","author","bugs","copyright","dependencies","devDependencies","async","chg","flex-sdk","grunt","grunt-bumpup","grunt-cli","grunt-connect","grunt-contrib-jshint","grunt-contrib-qunit","grunt-contrib-watch","grunt-npm","grunt-prompt","grunt-shell","grunt-tagrelease","qunitjs","video.js","directories","dist","shasum","size","noattachment","tarball","gitHead","homepage","keywords","maintainers","optionalDependencies","publish_time","readme","repository","scripts"],"mappings":"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","file":"static/js/1.c0bd83c149839f094ddb.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ \"34nC\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/components/Video/index.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n__webpack_require__(\"4CPX\");\n__webpack_require__(\"XMzW\");\n/* harmony default export */ var Video = ({\n  data: function data() {\n    return {\n      playerOptions: {\n        autoplay: false,\n        sources: [{\n          type: 'video/mp4',\n          src: 'http://www.wdhac.com.cn/CR-V/video/video1.mp4'\n        }],\n        language: 'zh-CN',\n        poster: 'http://www.cr-v.com.cn/images/kv02.jpg'\n      }\n    };\n  },\n\n  computed: {\n    player: function player() {\n      return this.$refs.videoPlayer.player;\n    }\n  },\n  methods: {\n    playerStateChanged: function playerStateChanged(playerCurrentState) {\n      // console.log('example 2: state changed', playerCurrentState)\n    },\n    playerIsReady: function playerIsReady(player) {\n      console.log('example 2 ready!', player);\n      player.hotkeys({\n        volumeStep: 0.1,\n        seekStep: 5,\n        enableModifiersForNumbers: false,\n        fullscreenKey: function fullscreenKey(event, player) {\n          // override fullscreen to trigger when pressing the F key or Ctrl+Enter\n          return event.which === 70 || event.ctrlKey && event.which === 13;\n        }\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-948eea5e\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Video/index.vue\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-row',[_c('el-col',{attrs:{\"span\":24}},[_c('video-player',{ref:\"videoPlayer\",staticClass:\"vjs-custom-skin\",attrs:{\"options\":_vm.playerOptions,\"customEventName\":\"changed\"},on:{\"ready\":_vm.playerIsReady,\"changed\":function($event){_vm.playerStateChanged($event)}}})],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ var components_Video = (esExports);\n// CONCATENATED MODULE: ./src/components/Video/index.vue\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  Video,\n  components_Video,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ var src_components_Video = __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"4CPX\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_video_js__ = __webpack_require__(\"Dia2\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_video_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_video_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_videojs_swf_package_json__ = __webpack_require__(\"vA7V\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_videojs_swf_package_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_videojs_swf_package_json__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_global_window__ = __webpack_require__(\"awF4\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_global_window___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_global_window__);\n\n\n\n\nvar version$1 = \"2.0.1\";\n\n/**\n * @file flash-rtmp.js\n * @module flash-rtmp\n */\n\n/**\n * Add RTMP properties to the {@link Flash} Tech.\n *\n * @param {Flash} Flash\n *        The flash tech class.\n *\n * @mixin FlashRtmpDecorator\n *\n * @return {Flash}\n *         The flash tech with RTMP properties added.\n */\nfunction FlashRtmpDecorator(Flash) {\n  Flash.streamingFormats = {\n    'rtmp/mp4': 'MP4',\n    'rtmp/flv': 'FLV'\n  };\n\n  /**\n   * Join connection and stream with an ampersand.\n   *\n   * @param {string} connection\n   *        The connection string.\n   *\n   * @param {string} stream\n   *        The stream string.\n   *\n   * @return {string}\n   *         The connection and stream joined with an `&` character\n   */\n  Flash.streamFromParts = function (connection, stream) {\n    return connection + '&' + stream;\n  };\n\n  /**\n   * The flash parts object that contains connection and stream info.\n   *\n   * @typedef {Object} Flash~PartsObject\n   *\n   * @property {string} connection\n   *           The connection string of a source, defaults to an empty string.\n   *\n   * @property {string} stream\n   *           The stream string of the source, defaults to an empty string.\n   */\n\n  /**\n   * Convert a source url into a stream and connection parts.\n   *\n   * @param {string} src\n   *        the source url\n   *\n   * @return {Flash~PartsObject}\n   *         The parts object that contains a connection and a stream\n   */\n  Flash.streamToParts = function (src) {\n    var parts = {\n      connection: '',\n      stream: ''\n    };\n\n    if (!src) {\n      return parts;\n    }\n\n    // Look for the normal URL separator we expect, '&'.\n    // If found, we split the URL into two pieces around the\n    // first '&'.\n    var connEnd = src.search(/&(?!\\w+=)/);\n    var streamBegin = void 0;\n\n    if (connEnd !== -1) {\n      streamBegin = connEnd + 1;\n    } else {\n      // If there's not a '&', we use the last '/' as the delimiter.\n      connEnd = streamBegin = src.lastIndexOf('/') + 1;\n      if (connEnd === 0) {\n        // really, there's not a '/'?\n        connEnd = streamBegin = src.length;\n      }\n    }\n\n    parts.connection = src.substring(0, connEnd);\n    parts.stream = src.substring(streamBegin, src.length);\n\n    return parts;\n  };\n\n  /**\n   * Check if the source type is a streaming type.\n   *\n   * @param {string} srcType\n   *        The mime type to check.\n   *\n   * @return {boolean}\n   *          - True if the source type is a streaming type.\n   *          - False if the source type is not a streaming type.\n   */\n  Flash.isStreamingType = function (srcType) {\n    return srcType in Flash.streamingFormats;\n  };\n\n  // RTMP has four variations, any string starting\n  // with one of these protocols should be valid\n\n  /**\n   * Regular expression used to check if the source is an rtmp source.\n   *\n   * @property {RegExp} Flash.RTMP_RE\n   */\n  Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n\n  /**\n   * Check if the source itself is a streaming type.\n   *\n   * @param {string} src\n   *        The url to the source.\n   *\n   * @return {boolean}\n   *          - True if the source url indicates that the source is streaming.\n   *          - False if the shource url indicates that the source url is not streaming.\n   */\n  Flash.isStreamingSrc = function (src) {\n    return Flash.RTMP_RE.test(src);\n  };\n\n  /**\n   * A source handler for RTMP urls\n   * @type {Object}\n   */\n  Flash.rtmpSourceHandler = {};\n\n  /**\n   * Check if Flash can play the given mime type.\n   *\n   * @param {string} type\n   *        The mime type to check\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canPlayType = function (type) {\n    if (Flash.isStreamingType(type)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Check if Flash can handle the source natively\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Object} [options]\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {\n    var can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n    if (can) {\n      return can;\n    }\n\n    if (Flash.isStreamingSrc(source.src)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Pass the source to the flash object.\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Flash} tech\n   *        The instance of the Flash tech\n   *\n   * @param {Object} [options]\n   *        The options to pass to the source\n   */\n  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {\n    var srcParts = Flash.streamToParts(source.src);\n\n    tech.setRtmpConnection(srcParts.connection);\n    tech.setRtmpStream(srcParts.stream);\n  };\n\n  // Register the native source handler\n  Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n\n  return Flash;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file flash.js\n * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n * https://github.com/zencoder/video-js-swf\n * Not using setupTriggers. Using global onEvent func to distribute events\n */\n\nvar Tech = __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.getComponent('Tech');\nvar Dom = __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.dom;\nvar Url = __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.url;\nvar createTimeRange = __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.createTimeRange;\nvar mergeOptions = __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.mergeOptions;\n\nvar navigator = __WEBPACK_IMPORTED_MODULE_2_global_window___default.a && __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.navigator || {};\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  inherits(Flash, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n  function Flash(options, ready) {\n    classCallCheck(this, Flash);\n\n    // Set the source when ready\n    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions\n    // (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs = __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs || {};\n    __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs.Flash = __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs.Flash || {};\n    __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs.Flash.onReady = Flash.onReady;\n    __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs.Flash.onEvent = Flash.onEvent;\n    __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.videojs.Flash.onError = Flash.onError;\n\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n\n    return _this;\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      options.swf = '//vjs.zencdn.net/swf/' + __WEBPACK_IMPORTED_MODULE_1_videojs_swf_package_json__[\"version\"] + '/video-js.swf';\n    }\n\n    // Generate ID for swf object\n    var objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    var flashVars = mergeOptions({\n\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    var params = mergeOptions({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    var attributes = mergeOptions({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n\n    return this.el_;\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  };\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(_src);\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   */\n\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this;\n\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  };\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    var duration = this.el_.vjs_getProperty('duration');\n\n    return duration >= 0 ? duration : Infinity;\n  };\n\n  /**\n   * Load media into Tech.\n   */\n\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n\n  Flash.prototype.setPoster = function setPoster() {};\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n\n    if (duration === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(0, duration);\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(ranges[0][0], ranges[0][1]);\n  };\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (__WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance && typeof __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance.now();\n    } else if (__WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance && __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance.timing && typeof __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.Date.now() - __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Flash;\n}(Tech);\n\n// Create setters and getters for attributes\n\n\nvar _readWrite = ['rtmpConnection', 'rtmpStream', 'preload', 'defaultPlaybackRate', 'playbackRate', 'autoplay', 'loop', 'controls', 'volume', 'muted', 'defaultMuted'];\nvar _readOnly = ['networkState', 'readyState', 'initialTime', 'startOffsetTime', 'paused', 'ended', 'videoWidth', 'videoHeight'];\nvar _api = Flash.prototype;\n\n/**\n * Create setters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\n/**\n * Create petters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\nTech.withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n\n  /**\n   * Guess the mime type of a file if it does not have one\n   *\n   * @param {Tech~SourceObject} src\n   *        The source object to guess the mime type for\n   *\n   * @return {string}\n   *         The mime type that was guessed\n   */\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return 'video/' + ext;\n    }\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n *\n * @param {Object} currSwf\n *        The current swf object\n */\nFlash.onReady = function (currSwf) {\n  var el = Dom.$('#' + currSwf);\n  var tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.$('#' + swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} err\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function (swfID, err) {\n  var tech = Dom.$('#' + swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function () {\n  var version$$1 = '0,0,0';\n\n  // IE\n  try {\n    version$$1 = new __WEBPACK_IMPORTED_MODULE_2_global_window___default.a.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n\n    // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version$$1 = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version$$1.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];\n\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = mergeOptions({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n\n  attributes = mergeOptions({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n};\n\n// Run Flash through the RTMP decorator\nFlashRtmpDecorator(Flash);\n\nif (Tech.getTech('Flash')) {\n  __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.log.warn('Not using videojs-flash as it appears to already be registered');\n  __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.log.warn('videojs-flash should only be used with video.js@6 and above');\n} else {\n  __WEBPACK_IMPORTED_MODULE_0_video_js___default.a.registerTech('Flash', Flash);\n}\n\nFlash.VERSION = version$1;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Flash);\n\n\n/***/ }),\n\n/***/ \"XMzW\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* videojs-hotkeys v0.2.20 - https://github.com/ctd1500/videojs-hotkeys */\n!function(e,t){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(\"Dia2\")], __WEBPACK_AMD_DEFINE_RESULT__ = function(e){return t(e.default||e)}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"undefined\"!=typeof module&&module.exports?module.exports=t(require(\"video.js\")):t(videojs)}(0,function(e){\"use strict\";\"undefined\"!=typeof window&&(window.videojs_hotkeys={version:\"0.2.20\"});(e.registerPlugin||e.plugin)(\"hotkeys\",function(t){var r=this,n=r.el(),o=document,u={volumeStep:.1,seekStep:5,enableMute:!0,enableVolumeScroll:!0,enableFullscreen:!0,enableNumbers:!0,enableJogStyle:!1,alwaysCaptureHotkeys:!1,enableModifiersForNumbers:!0,enableInactiveFocus:!0,skipInitialFocus:!1,playPauseKey:function(e){return 32===e.which||179===e.which},rewindKey:function(e){return 37===e.which||177===e.which},forwardKey:function(e){return 39===e.which||176===e.which},volumeUpKey:function(e){return 38===e.which},volumeDownKey:function(e){return 40===e.which},muteKey:function(e){return 77===e.which},fullscreenKey:function(e){return 70===e.which},customKeys:{}},l=e.mergeOptions||e.util.mergeOptions,i=(t=l(u,t||{})).volumeStep,a=t.seekStep,c=t.enableMute,s=t.enableVolumeScroll,m=t.enableFullscreen,y=t.enableNumbers,f=t.enableJogStyle,v=t.alwaysCaptureHotkeys,d=t.enableModifiersForNumbers,p=t.enableInactiveFocus,b=t.skipInitialFocus;n.hasAttribute(\"tabIndex\")||n.setAttribute(\"tabIndex\",\"-1\"),n.style.outline=\"none\",!v&&r.autoplay()||b||r.one(\"play\",function(){n.focus()}),p&&r.on(\"userinactive\",function(){var e=function(){clearTimeout(t)},t=setTimeout(function(){r.off(\"useractive\",e),o.activeElement.parentElement==n.querySelector(\".vjs-control-bar\")&&n.focus()},10);r.one(\"useractive\",e)}),r.on(\"play\",function(){var e=n.querySelector(\".iframeblocker\");e&&\"\"===e.style.display&&(e.style.display=\"block\",e.style.bottom=\"39px\")});var h=function(e){if(r.controls()){var t=e.relatedTarget||e.toElement||o.activeElement;if((v||t==n||t==n.querySelector(\".vjs-tech\")||t==n.querySelector(\".iframeblocker\")||t==n.querySelector(\".vjs-control-bar\"))&&s){e=window.event||e;var u=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail));e.preventDefault(),1==u?r.volume(r.volume()+i):-1==u&&r.volume(r.volume()-i)}}},w=function(e,r){return t.playPauseKey(e,r)?1:t.rewindKey(e,r)?2:t.forwardKey(e,r)?3:t.volumeUpKey(e,r)?4:t.volumeDownKey(e,r)?5:t.muteKey(e,r)?6:t.fullscreenKey(e,r)?7:void 0};return r.on(\"keydown\",function(e){var u,l,s=e.which,p=e.preventDefault,b=r.duration();if(r.controls()){var h=o.activeElement;if(v||h==n||h==n.querySelector(\".vjs-tech\")||h==n.querySelector(\".vjs-control-bar\")||h==n.querySelector(\".iframeblocker\"))switch(w(e,r)){case 1:p(),v&&e.stopPropagation(),r.paused()?r.play():r.pause();break;case 2:u=!r.paused(),p(),u&&r.pause(),l=r.currentTime()-a,r.currentTime()<=a&&(l=0),r.currentTime(l),u&&r.play();break;case 3:u=!r.paused(),p(),u&&r.pause(),(l=r.currentTime()+a)>=b&&(l=u?b-.001:b),r.currentTime(l),u&&r.play();break;case 5:p(),f?(l=r.currentTime()-1,r.currentTime()<=1&&(l=0),r.currentTime(l)):r.volume(r.volume()-i);break;case 4:p(),f?((l=r.currentTime()+1)>=b&&(l=b),r.currentTime(l)):r.volume(r.volume()+i);break;case 6:c&&r.muted(!r.muted());break;case 7:m&&(r.isFullscreen()?r.exitFullscreen():r.requestFullscreen());break;default:if((s>47&&s<59||s>95&&s<106)&&(d||!(e.metaKey||e.ctrlKey||e.altKey))&&y){var k=48;s>95&&(k=96);var K=s-k;p(),r.currentTime(r.duration()*K*.1)}for(var S in t.customKeys){var T=t.customKeys[S];T&&T.key&&T.handler&&T.key(e)&&(p(),T.handler(r,t,e))}}}}),r.on(\"dblclick\",function(e){if(r.controls()){var t=e.relatedTarget||e.toElement||o.activeElement;t!=n&&t!=n.querySelector(\".vjs-tech\")&&t!=n.querySelector(\".iframeblocker\")||m&&(r.isFullscreen()?r.exitFullscreen():r.requestFullscreen())}}),r.on(\"mousewheel\",h),r.on(\"DOMMouseScroll\",h),this})});\n\n/***/ }),\n\n/***/ \"vA7V\":\n/***/ (function(module, exports) {\n\nmodule.exports = {\"_args\":[[{\"raw\":\"videojs-swf@5.4.1\",\"scope\":null,\"escapedName\":\"videojs-swf\",\"name\":\"videojs-swf\",\"rawSpec\":\"5.4.1\",\"spec\":\"5.4.1\",\"type\":\"version\"},\"/Users/suweya/vue/vue-router-introduction/node_modules/videojs-flash\"]],\"_cnpm_publish_time\":1501008439903,\"_from\":\"videojs-swf@5.4.1\",\"_hasShrinkwrap\":false,\"_id\":\"videojs-swf@5.4.1\",\"_inCache\":true,\"_location\":\"/videojs-swf\",\"_nodeVersion\":\"4.4.3\",\"_npmOperationalInternal\":{\"host\":\"s3://npm-registry-packages\",\"tmp\":\"tmp/videojs-swf-5.4.1.tgz_1501008438180_0.07815821003168821\"},\"_npmUser\":{\"name\":\"gkatsev\",\"email\":\"me@gkatsev.com\"},\"_npmVersion\":\"2.15.6\",\"_phantomChildren\":{},\"_requested\":{\"raw\":\"videojs-swf@5.4.1\",\"scope\":null,\"escapedName\":\"videojs-swf\",\"name\":\"videojs-swf\",\"rawSpec\":\"5.4.1\",\"spec\":\"5.4.1\",\"type\":\"version\"},\"_requiredBy\":[\"/videojs-flash\"],\"_resolved\":\"http://registry.npm.taobao.org/videojs-swf/download/videojs-swf-5.4.1.tgz\",\"_shasum\":\"2077ef71c749f2c7823ef49babae4dd2acb08f87\",\"_shrinkwrap\":null,\"_spec\":\"videojs-swf@5.4.1\",\"_where\":\"/Users/suweya/vue/vue-router-introduction/node_modules/videojs-flash\",\"author\":{\"name\":\"Brightcove\"},\"bugs\":{\"url\":\"https://github.com/videojs/video-js-swf/issues\"},\"copyright\":\"Copyright 2014 Brightcove, Inc. https://github.com/videojs/video-js-swf/blob/master/LICENSE\",\"dependencies\":{},\"description\":\"The Flash-fallback video player for video.js (http://videojs.com)\",\"devDependencies\":{\"async\":\"~0.2.9\",\"chg\":\"^0.3.2\",\"flex-sdk\":\"4.6.0-0\",\"grunt\":\"~0.4.0\",\"grunt-bumpup\":\"~0.5.0\",\"grunt-cli\":\"~0.1.0\",\"grunt-connect\":\"~0.2.0\",\"grunt-contrib-jshint\":\"~0.4.3\",\"grunt-contrib-qunit\":\"~0.2.1\",\"grunt-contrib-watch\":\"~0.1.4\",\"grunt-npm\":\"~0.0.2\",\"grunt-prompt\":\"~0.1.2\",\"grunt-shell\":\"~0.6.1\",\"grunt-tagrelease\":\"~0.3.1\",\"qunitjs\":\"~1.12.0\",\"video.js\":\"^5.9.2\"},\"directories\":{},\"dist\":{\"shasum\":\"2077ef71c749f2c7823ef49babae4dd2acb08f87\",\"size\":57885,\"noattachment\":false,\"tarball\":\"http://registry.npm.taobao.org/videojs-swf/download/videojs-swf-5.4.1.tgz\"},\"gitHead\":\"ecddbd22cf2e51f5e5246fe7fe3e3e1fd8dec114\",\"homepage\":\"http://videojs.com\",\"keywords\":[\"flash\",\"video\",\"player\"],\"maintainers\":[{\"name\":\"bclwhitaker\",\"email\":\"lwhitaker@brightcove.com\"},{\"name\":\"dmlap\",\"email\":\"dlapalomento@gmail.com\"},{\"name\":\"gkatsev\",\"email\":\"me@gkatsev.com\"},{\"name\":\"heff\",\"email\":\"steve@zencoder.com\"},{\"name\":\"seniorflexdeveloper\",\"email\":\"seniorflexdeveloper@gmail.com\"}],\"name\":\"videojs-swf\",\"optionalDependencies\":{},\"publish_time\":1501008439903,\"readme\":\"ERROR: No README data found!\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/videojs/video-js-swf.git\"},\"scripts\":{\"version\":\"chg release -y && grunt dist && git add -f dist/ && git add CHANGELOG.md\"},\"version\":\"5.4.1\"}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.c0bd83c149839f094ddb.js","<template>\n  <div>\n    <el-row>\n      <el-col :span=\"24\">\n        <video-player class=\"vjs-custom-skin\"\n                        ref=\"videoPlayer\"\n                        :options=\"playerOptions\"\n                        customEventName=\"changed\"\n                        @ready=\"playerIsReady\"\n                        @changed=\"playerStateChanged($event)\">\n          </video-player>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nrequire('videojs-flash')\nrequire('videojs-hotkeys')\nexport default {\n  data() {\n    return {\n      playerOptions: {\n        autoplay: false,\n        sources: [\n          {\n            type: 'video/mp4',\n            src: 'http://www.wdhac.com.cn/CR-V/video/video1.mp4'\n          }\n        ],\n        language: 'zh-CN',\n        poster: 'http://www.cr-v.com.cn/images/kv02.jpg'\n      }\n    }\n  },\n  computed: {\n    player() {\n      return this.$refs.videoPlayer.player\n    }\n  },\n  methods: {\n    playerStateChanged(playerCurrentState) {\n      // console.log('example 2: state changed', playerCurrentState)\n    },\n    playerIsReady(player) {\n      console.log('example 2 ready!', player)\n      player.hotkeys({\n        volumeStep: 0.1,\n        seekStep: 5,\n        enableModifiersForNumbers: false,\n        fullscreenKey: function(event, player) {\n          // override fullscreen to trigger when pressing the F key or Ctrl+Enter\n          return event.which === 70 || (event.ctrlKey && event.which === 13)\n        }\n      })\n    }\n  }\n}\n</script>\n\n\n\n\n// WEBPACK FOOTER //\n// src/components/Video/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-row',[_c('el-col',{attrs:{\"span\":24}},[_c('video-player',{ref:\"videoPlayer\",staticClass:\"vjs-custom-skin\",attrs:{\"options\":_vm.playerOptions,\"customEventName\":\"changed\"},on:{\"ready\":_vm.playerIsReady,\"changed\":function($event){_vm.playerStateChanged($event)}}})],1)],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-948eea5e\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Video/index.vue\n// module id = null\n// module chunks = ","var normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-948eea5e\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Video/index.vue\n// module id = null\n// module chunks = ","import videojs from 'video.js';\nimport { version } from 'videojs-swf/package.json';\nimport window from 'global/window';\n\nvar version$1 = \"2.0.1\";\n\n/**\n * @file flash-rtmp.js\n * @module flash-rtmp\n */\n\n/**\n * Add RTMP properties to the {@link Flash} Tech.\n *\n * @param {Flash} Flash\n *        The flash tech class.\n *\n * @mixin FlashRtmpDecorator\n *\n * @return {Flash}\n *         The flash tech with RTMP properties added.\n */\nfunction FlashRtmpDecorator(Flash) {\n  Flash.streamingFormats = {\n    'rtmp/mp4': 'MP4',\n    'rtmp/flv': 'FLV'\n  };\n\n  /**\n   * Join connection and stream with an ampersand.\n   *\n   * @param {string} connection\n   *        The connection string.\n   *\n   * @param {string} stream\n   *        The stream string.\n   *\n   * @return {string}\n   *         The connection and stream joined with an `&` character\n   */\n  Flash.streamFromParts = function (connection, stream) {\n    return connection + '&' + stream;\n  };\n\n  /**\n   * The flash parts object that contains connection and stream info.\n   *\n   * @typedef {Object} Flash~PartsObject\n   *\n   * @property {string} connection\n   *           The connection string of a source, defaults to an empty string.\n   *\n   * @property {string} stream\n   *           The stream string of the source, defaults to an empty string.\n   */\n\n  /**\n   * Convert a source url into a stream and connection parts.\n   *\n   * @param {string} src\n   *        the source url\n   *\n   * @return {Flash~PartsObject}\n   *         The parts object that contains a connection and a stream\n   */\n  Flash.streamToParts = function (src) {\n    var parts = {\n      connection: '',\n      stream: ''\n    };\n\n    if (!src) {\n      return parts;\n    }\n\n    // Look for the normal URL separator we expect, '&'.\n    // If found, we split the URL into two pieces around the\n    // first '&'.\n    var connEnd = src.search(/&(?!\\w+=)/);\n    var streamBegin = void 0;\n\n    if (connEnd !== -1) {\n      streamBegin = connEnd + 1;\n    } else {\n      // If there's not a '&', we use the last '/' as the delimiter.\n      connEnd = streamBegin = src.lastIndexOf('/') + 1;\n      if (connEnd === 0) {\n        // really, there's not a '/'?\n        connEnd = streamBegin = src.length;\n      }\n    }\n\n    parts.connection = src.substring(0, connEnd);\n    parts.stream = src.substring(streamBegin, src.length);\n\n    return parts;\n  };\n\n  /**\n   * Check if the source type is a streaming type.\n   *\n   * @param {string} srcType\n   *        The mime type to check.\n   *\n   * @return {boolean}\n   *          - True if the source type is a streaming type.\n   *          - False if the source type is not a streaming type.\n   */\n  Flash.isStreamingType = function (srcType) {\n    return srcType in Flash.streamingFormats;\n  };\n\n  // RTMP has four variations, any string starting\n  // with one of these protocols should be valid\n\n  /**\n   * Regular expression used to check if the source is an rtmp source.\n   *\n   * @property {RegExp} Flash.RTMP_RE\n   */\n  Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n\n  /**\n   * Check if the source itself is a streaming type.\n   *\n   * @param {string} src\n   *        The url to the source.\n   *\n   * @return {boolean}\n   *          - True if the source url indicates that the source is streaming.\n   *          - False if the shource url indicates that the source url is not streaming.\n   */\n  Flash.isStreamingSrc = function (src) {\n    return Flash.RTMP_RE.test(src);\n  };\n\n  /**\n   * A source handler for RTMP urls\n   * @type {Object}\n   */\n  Flash.rtmpSourceHandler = {};\n\n  /**\n   * Check if Flash can play the given mime type.\n   *\n   * @param {string} type\n   *        The mime type to check\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canPlayType = function (type) {\n    if (Flash.isStreamingType(type)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Check if Flash can handle the source natively\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Object} [options]\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {\n    var can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n    if (can) {\n      return can;\n    }\n\n    if (Flash.isStreamingSrc(source.src)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Pass the source to the flash object.\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Flash} tech\n   *        The instance of the Flash tech\n   *\n   * @param {Object} [options]\n   *        The options to pass to the source\n   */\n  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {\n    var srcParts = Flash.streamToParts(source.src);\n\n    tech.setRtmpConnection(srcParts.connection);\n    tech.setRtmpStream(srcParts.stream);\n  };\n\n  // Register the native source handler\n  Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n\n  return Flash;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file flash.js\n * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n * https://github.com/zencoder/video-js-swf\n * Not using setupTriggers. Using global onEvent func to distribute events\n */\n\nvar Tech = videojs.getComponent('Tech');\nvar Dom = videojs.dom;\nvar Url = videojs.url;\nvar createTimeRange = videojs.createTimeRange;\nvar mergeOptions = videojs.mergeOptions;\n\nvar navigator = window && window.navigator || {};\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  inherits(Flash, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n  function Flash(options, ready) {\n    classCallCheck(this, Flash);\n\n    // Set the source when ready\n    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions\n    // (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    window.videojs = window.videojs || {};\n    window.videojs.Flash = window.videojs.Flash || {};\n    window.videojs.Flash.onReady = Flash.onReady;\n    window.videojs.Flash.onEvent = Flash.onEvent;\n    window.videojs.Flash.onError = Flash.onError;\n\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n\n    return _this;\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      options.swf = '//vjs.zencdn.net/swf/' + version + '/video-js.swf';\n    }\n\n    // Generate ID for swf object\n    var objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    var flashVars = mergeOptions({\n\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    var params = mergeOptions({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    var attributes = mergeOptions({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n\n    return this.el_;\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  };\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(_src);\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   */\n\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this;\n\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  };\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    var duration = this.el_.vjs_getProperty('duration');\n\n    return duration >= 0 ? duration : Infinity;\n  };\n\n  /**\n   * Load media into Tech.\n   */\n\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n\n  Flash.prototype.setPoster = function setPoster() {};\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n\n    if (duration === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(0, duration);\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return createTimeRange();\n    }\n    return createTimeRange(ranges[0][0], ranges[0][1]);\n  };\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (window.performance && typeof window.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window.performance.now();\n    } else if (window.performance && window.performance.timing && typeof window.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window.Date.now() - window.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Flash;\n}(Tech);\n\n// Create setters and getters for attributes\n\n\nvar _readWrite = ['rtmpConnection', 'rtmpStream', 'preload', 'defaultPlaybackRate', 'playbackRate', 'autoplay', 'loop', 'controls', 'volume', 'muted', 'defaultMuted'];\nvar _readOnly = ['networkState', 'readyState', 'initialTime', 'startOffsetTime', 'paused', 'ended', 'videoWidth', 'videoHeight'];\nvar _api = Flash.prototype;\n\n/**\n * Create setters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\n/**\n * Create petters for the swf on the element\n *\n * @param {string} attr\n *        The name of the parameter\n *\n * @private\n */\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\nTech.withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n\n  /**\n   * Guess the mime type of a file if it does not have one\n   *\n   * @param {Tech~SourceObject} src\n   *        The source object to guess the mime type for\n   *\n   * @return {string}\n   *         The mime type that was guessed\n   */\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return 'video/' + ext;\n    }\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n *\n * @param {Object} currSwf\n *        The current swf object\n */\nFlash.onReady = function (currSwf) {\n  var el = Dom.$('#' + currSwf);\n  var tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.$('#' + swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} err\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function (swfID, err) {\n  var tech = Dom.$('#' + swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function () {\n  var version$$1 = '0,0,0';\n\n  // IE\n  try {\n    version$$1 = new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n\n    // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version$$1 = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version$$1.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];\n\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = mergeOptions({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n\n  attributes = mergeOptions({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n};\n\n// Run Flash through the RTMP decorator\nFlashRtmpDecorator(Flash);\n\nif (Tech.getTech('Flash')) {\n  videojs.log.warn('Not using videojs-flash as it appears to already be registered');\n  videojs.log.warn('videojs-flash should only be used with video.js@6 and above');\n} else {\n  videojs.registerTech('Flash', Flash);\n}\n\nFlash.VERSION = version$1;\n\nexport default Flash;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/videojs-flash/dist/videojs-flash.es.js\n// module id = 4CPX\n// module chunks = 1","/* videojs-hotkeys v0.2.20 - https://github.com/ctd1500/videojs-hotkeys */\n!function(e,t){\"function\"==typeof define&&define.amd?define(\"videojs-hotkeys\",[\"video.js\"],function(e){return t(e.default||e)}):\"undefined\"!=typeof module&&module.exports?module.exports=t(require(\"video.js\")):t(videojs)}(0,function(e){\"use strict\";\"undefined\"!=typeof window&&(window.videojs_hotkeys={version:\"0.2.20\"});(e.registerPlugin||e.plugin)(\"hotkeys\",function(t){var r=this,n=r.el(),o=document,u={volumeStep:.1,seekStep:5,enableMute:!0,enableVolumeScroll:!0,enableFullscreen:!0,enableNumbers:!0,enableJogStyle:!1,alwaysCaptureHotkeys:!1,enableModifiersForNumbers:!0,enableInactiveFocus:!0,skipInitialFocus:!1,playPauseKey:function(e){return 32===e.which||179===e.which},rewindKey:function(e){return 37===e.which||177===e.which},forwardKey:function(e){return 39===e.which||176===e.which},volumeUpKey:function(e){return 38===e.which},volumeDownKey:function(e){return 40===e.which},muteKey:function(e){return 77===e.which},fullscreenKey:function(e){return 70===e.which},customKeys:{}},l=e.mergeOptions||e.util.mergeOptions,i=(t=l(u,t||{})).volumeStep,a=t.seekStep,c=t.enableMute,s=t.enableVolumeScroll,m=t.enableFullscreen,y=t.enableNumbers,f=t.enableJogStyle,v=t.alwaysCaptureHotkeys,d=t.enableModifiersForNumbers,p=t.enableInactiveFocus,b=t.skipInitialFocus;n.hasAttribute(\"tabIndex\")||n.setAttribute(\"tabIndex\",\"-1\"),n.style.outline=\"none\",!v&&r.autoplay()||b||r.one(\"play\",function(){n.focus()}),p&&r.on(\"userinactive\",function(){var e=function(){clearTimeout(t)},t=setTimeout(function(){r.off(\"useractive\",e),o.activeElement.parentElement==n.querySelector(\".vjs-control-bar\")&&n.focus()},10);r.one(\"useractive\",e)}),r.on(\"play\",function(){var e=n.querySelector(\".iframeblocker\");e&&\"\"===e.style.display&&(e.style.display=\"block\",e.style.bottom=\"39px\")});var h=function(e){if(r.controls()){var t=e.relatedTarget||e.toElement||o.activeElement;if((v||t==n||t==n.querySelector(\".vjs-tech\")||t==n.querySelector(\".iframeblocker\")||t==n.querySelector(\".vjs-control-bar\"))&&s){e=window.event||e;var u=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail));e.preventDefault(),1==u?r.volume(r.volume()+i):-1==u&&r.volume(r.volume()-i)}}},w=function(e,r){return t.playPauseKey(e,r)?1:t.rewindKey(e,r)?2:t.forwardKey(e,r)?3:t.volumeUpKey(e,r)?4:t.volumeDownKey(e,r)?5:t.muteKey(e,r)?6:t.fullscreenKey(e,r)?7:void 0};return r.on(\"keydown\",function(e){var u,l,s=e.which,p=e.preventDefault,b=r.duration();if(r.controls()){var h=o.activeElement;if(v||h==n||h==n.querySelector(\".vjs-tech\")||h==n.querySelector(\".vjs-control-bar\")||h==n.querySelector(\".iframeblocker\"))switch(w(e,r)){case 1:p(),v&&e.stopPropagation(),r.paused()?r.play():r.pause();break;case 2:u=!r.paused(),p(),u&&r.pause(),l=r.currentTime()-a,r.currentTime()<=a&&(l=0),r.currentTime(l),u&&r.play();break;case 3:u=!r.paused(),p(),u&&r.pause(),(l=r.currentTime()+a)>=b&&(l=u?b-.001:b),r.currentTime(l),u&&r.play();break;case 5:p(),f?(l=r.currentTime()-1,r.currentTime()<=1&&(l=0),r.currentTime(l)):r.volume(r.volume()-i);break;case 4:p(),f?((l=r.currentTime()+1)>=b&&(l=b),r.currentTime(l)):r.volume(r.volume()+i);break;case 6:c&&r.muted(!r.muted());break;case 7:m&&(r.isFullscreen()?r.exitFullscreen():r.requestFullscreen());break;default:if((s>47&&s<59||s>95&&s<106)&&(d||!(e.metaKey||e.ctrlKey||e.altKey))&&y){var k=48;s>95&&(k=96);var K=s-k;p(),r.currentTime(r.duration()*K*.1)}for(var S in t.customKeys){var T=t.customKeys[S];T&&T.key&&T.handler&&T.key(e)&&(p(),T.handler(r,t,e))}}}}),r.on(\"dblclick\",function(e){if(r.controls()){var t=e.relatedTarget||e.toElement||o.activeElement;t!=n&&t!=n.querySelector(\".vjs-tech\")&&t!=n.querySelector(\".iframeblocker\")||m&&(r.isFullscreen()?r.exitFullscreen():r.requestFullscreen())}}),r.on(\"mousewheel\",h),r.on(\"DOMMouseScroll\",h),this})});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/videojs-hotkeys/videojs.hotkeys.min.js\n// module id = XMzW\n// module chunks = 1","module.exports = {\"_args\":[[{\"raw\":\"videojs-swf@5.4.1\",\"scope\":null,\"escapedName\":\"videojs-swf\",\"name\":\"videojs-swf\",\"rawSpec\":\"5.4.1\",\"spec\":\"5.4.1\",\"type\":\"version\"},\"/Users/suweya/vue/vue-router-introduction/node_modules/videojs-flash\"]],\"_cnpm_publish_time\":1501008439903,\"_from\":\"videojs-swf@5.4.1\",\"_hasShrinkwrap\":false,\"_id\":\"videojs-swf@5.4.1\",\"_inCache\":true,\"_location\":\"/videojs-swf\",\"_nodeVersion\":\"4.4.3\",\"_npmOperationalInternal\":{\"host\":\"s3://npm-registry-packages\",\"tmp\":\"tmp/videojs-swf-5.4.1.tgz_1501008438180_0.07815821003168821\"},\"_npmUser\":{\"name\":\"gkatsev\",\"email\":\"me@gkatsev.com\"},\"_npmVersion\":\"2.15.6\",\"_phantomChildren\":{},\"_requested\":{\"raw\":\"videojs-swf@5.4.1\",\"scope\":null,\"escapedName\":\"videojs-swf\",\"name\":\"videojs-swf\",\"rawSpec\":\"5.4.1\",\"spec\":\"5.4.1\",\"type\":\"version\"},\"_requiredBy\":[\"/videojs-flash\"],\"_resolved\":\"http://registry.npm.taobao.org/videojs-swf/download/videojs-swf-5.4.1.tgz\",\"_shasum\":\"2077ef71c749f2c7823ef49babae4dd2acb08f87\",\"_shrinkwrap\":null,\"_spec\":\"videojs-swf@5.4.1\",\"_where\":\"/Users/suweya/vue/vue-router-introduction/node_modules/videojs-flash\",\"author\":{\"name\":\"Brightcove\"},\"bugs\":{\"url\":\"https://github.com/videojs/video-js-swf/issues\"},\"copyright\":\"Copyright 2014 Brightcove, Inc. https://github.com/videojs/video-js-swf/blob/master/LICENSE\",\"dependencies\":{},\"description\":\"The Flash-fallback video player for video.js (http://videojs.com)\",\"devDependencies\":{\"async\":\"~0.2.9\",\"chg\":\"^0.3.2\",\"flex-sdk\":\"4.6.0-0\",\"grunt\":\"~0.4.0\",\"grunt-bumpup\":\"~0.5.0\",\"grunt-cli\":\"~0.1.0\",\"grunt-connect\":\"~0.2.0\",\"grunt-contrib-jshint\":\"~0.4.3\",\"grunt-contrib-qunit\":\"~0.2.1\",\"grunt-contrib-watch\":\"~0.1.4\",\"grunt-npm\":\"~0.0.2\",\"grunt-prompt\":\"~0.1.2\",\"grunt-shell\":\"~0.6.1\",\"grunt-tagrelease\":\"~0.3.1\",\"qunitjs\":\"~1.12.0\",\"video.js\":\"^5.9.2\"},\"directories\":{},\"dist\":{\"shasum\":\"2077ef71c749f2c7823ef49babae4dd2acb08f87\",\"size\":57885,\"noattachment\":false,\"tarball\":\"http://registry.npm.taobao.org/videojs-swf/download/videojs-swf-5.4.1.tgz\"},\"gitHead\":\"ecddbd22cf2e51f5e5246fe7fe3e3e1fd8dec114\",\"homepage\":\"http://videojs.com\",\"keywords\":[\"flash\",\"video\",\"player\"],\"maintainers\":[{\"name\":\"bclwhitaker\",\"email\":\"lwhitaker@brightcove.com\"},{\"name\":\"dmlap\",\"email\":\"dlapalomento@gmail.com\"},{\"name\":\"gkatsev\",\"email\":\"me@gkatsev.com\"},{\"name\":\"heff\",\"email\":\"steve@zencoder.com\"},{\"name\":\"seniorflexdeveloper\",\"email\":\"seniorflexdeveloper@gmail.com\"}],\"name\":\"videojs-swf\",\"optionalDependencies\":{},\"publish_time\":1501008439903,\"readme\":\"ERROR: No README data found!\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/videojs/video-js-swf.git\"},\"scripts\":{\"version\":\"chg release -y && grunt dist && git add -f dist/ && git add CHANGELOG.md\"},\"version\":\"5.4.1\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/videojs-swf/package.json\n// module id = vA7V\n// module chunks = 1"],"sourceRoot":""}